{"ast":null,"code":"import _objectSpread from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamarauber/Desktop/FinalProjAuber/src/App.js\";\nimport React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport './App.css';\nimport AddAUserScreen from './AddAUserScreen.js';\nimport SendTextScreen from './SendTextScreen.js';\nimport UserScreen from './UserScreen.js';\nimport LoginMainScreen from './LoginMainScreen.js';\nimport FinalProjectScreen from './FinalProjectScreen.js';\nimport DataSheet_restaurants from './DataSheet_restaurants.js';\nimport DataSheet_reviews from './DataSheet_reviews.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\nimport DataSheet_pickerNumberOfRows from './DataSheet_pickerNumberOfRows.js';\nimport firebase from 'firebase';\nimport firestore from 'firebase/firestore';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.dataSheets = {};\n    _this.dataSheets['restaurants'] = new DataSheet_restaurants('restaurants', _this.dataSheetDidUpdate);\n    _this.dataSheets['reviews'] = new DataSheet_reviews('reviews', _this.dataSheetDidUpdate);\n    _this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', _this.dataSheetDidUpdate);\n    _this.dataSheets['pickerNumberOfRows'] = new DataSheet_pickerNumberOfRows('pickerNumberOfRows', _this.dataSheetDidUpdate);\n    _this.dataSlots = {};\n    _this.dataSlots['ds_activeLang'] = \"en\";\n    _this.dataSlots['ds_selectedRestaurantId'] = \"4r2BhNHW8guC9SaDbzoG\";\n    _this.dataSlots['ds_numberOfRestaurants'] = \"10\";\n    _this.dataSlots['ds_SlotUserID'] = \"\";\n    _this.dataSlots['ds_SlotUserName'] = \"\";\n    _this.dataSlots['ds_SlotUserEmail'] = \"\";\n    _this.dataSlots['ds_SlotReviewRating'] = \"0\";\n    _this.dataSlots['ds_selectedRestaurantName'] = \"\";\n\n    _this.updateLocalizationFromDataSheet(_this.dataSheets['localizationSheet']); // Initialize web service plugin 'firebase-restaurantguide'\n\n\n    firebase.initializeApp({\n      apiKey: \"AIzaSyAmVUE1fo5u7SxonFIdBu_wfeP4OPVJZA8\",\n      authDomain: \"restaurantdemo-8131e.firebaseapp.com\",\n      databaseURL: \"https://restaurantdemo-8131e.firebaseio.com\",\n      projectId: \"restaurantdemo-8131e\",\n      storageBucket: \"\",\n      messagingSenderId: \"1076186344909\",\n      appId: \"1:1076186344909:web:2df01f55f460a19d\"\n    });\n    firebase.firestore().settings({}); // Initialize web service plugin 'firebase 1'\n\n    /*firebase.initializeApp({\n        apiKey: \"AIzaSyD98BZnif_88GJQuy_cF67rBJHn_xianFs\",\n        authDomain: \"texterimages.firebaseapp.com\",\n        databaseURL: \"https://texterimages.firebaseio.com\",\n        projectId: \"texterimages\",\n        storageBucket: \"texterimages.appspot.com\",\n        messagingSenderId: \"592534977480\",\n        appId: \"1:592534977480:web:ee43d9435e5a242d\"\n      });\n    firebase.firestore().settings({});\n    \n    this.serviceOptions_restaurants = {\n      dataSlots: this.dataSlots,\n      servicePath: \"restaurants\",\n      query: \"\",\n    };\n    this.dataSheets['restaurants'].firebase = firebase;\n    \n    this.serviceOptions_reviews = {\n      dataSlots: this.dataSlots,\n      servicePath: \"reviews\",\n      query: \"where(\\\"restaurantID\\\", \\\"==\\\", \\\"$slot('ds_selectedRestaurantId')\\\").orderBy(\\\"reviewDate\\\",\\\"desc\\\")\",\n    };\n    this.dataSheets['reviews'].firebase = firebase;\n    \n     this.state = {\n      currentScreen: 'loginmain',\n      currentScreenProps: {},\n      screenTransitionForward: true,\n    }\n    this.screenHistory = [ {...this.state} ];\n    }\n    windowDidResize = () => {\n    let w = window.innerWidth;\n    let formatId;\n    if (w < 576) formatId = 'narrow-phone';\n    else if (w < 768) formatId = 'wide-phone';\n    else if (w < 1024) formatId = 'narrow-tablet';\n    else formatId = 'wide-tablet';\n    if (formatId !== this.state.screenFormatId) {\n      this.setState({screenFormatId: formatId});\n    }\n    }\n    componentDidMount() {\n    this.windowDidResize();\n    window.addEventListener('resize', this.windowDidResize);\n     this.serviceOptions_restaurants.servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots);\n    this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n    \n    this.serviceOptions_reviews.servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots);\n    this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n    \n    }\n    componentWillUnmount() {\n    window.removeEventListener('resize', this.windowDidResize);\n    }\n    isLoading() {\n    return this.state.loading;\n    }\n    goToScreen = (screenId, props) => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n     let screenIdx = -1;  // Check if the screen is already in the history stack, and pop back if so\n    for (let i = 0; i < this.screenHistory.length; i++) {\n      if (this.screenHistory[i].currentScreen === screenId) {\n        screenIdx = i;\n        break;\n      }\n    }\n    if (screenIdx > -1) {\n      this.screenHistory.splice(screenIdx + 1, this.screenHistory.length - screenIdx - 1);\n      let prevScreenState = this.screenHistory[screenIdx];\n      this.setState({...prevScreenState, screenTransitionForward: false});\n    }\n    else {\n      props = props || {};\n      let screenState = {currentScreen: screenId, currentScreenProps: props};\n      this.screenHistory.push(screenState);\n      this.setState({...screenState, screenTransitionForward: true});\n    }\n    window.scrollTo(0, 0);\n    }\n    goBack = () => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n    if (this.screenHistory.length < 2)\n      return;\n     this.screenHistory.splice(this.screenHistory.length - 1, 1);\n    let prevScreenState = this.screenHistory[this.screenHistory.length - 1];\n    this.setState({...prevScreenState, screenTransitionForward: false});\n    window.scrollTo(0, 0);\n    }\n    getDataSheet = (sheetId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    return this.dataSheets[sheetId];\n    }\n    addToDataSheet = (sheetId, newRow, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && newRow) {\n      sheet.addItem(newRow, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n    }\n    updateInDataSheet = (sheetId, row, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.replaceItemByKey(row.key, row, this['serviceOptions_'+sheetId] || {});\n       if (this.state.currentScreenProps.dataSheetRow) {\n        let screenProps = {...this.state.currentScreenProps};\n        screenProps.dataSheetRow = row;\n         // Also update any props that were carried into a detail view\n        for (let prop in screenProps) {\n          if (row[prop] !== undefined) {\n            screenProps[prop] = row[prop];\n          }\n        }\n        this.setState({currentScreenProps: screenProps});\n      } else {\n        this.setState({});\n      }\n    }\n    }\n    removeFromDataSheet = (sheetId, row) => {\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.removeItem(row, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n    }\n    updateDataSlot = (slotId, value, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.dataSlots[slotId] = value;\n    if (slotId === 'ds_activeLang') {\n      this.locStrings.setLanguage(value);\n    }\n     {\n      let usedSlots = [];\n      let servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.serviceOptions_restaurants.servicePath = servicePath;\n        this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n      }\n    }\n    if (this.serviceOptions_reviews.query.length > 0) {\n      let usedSlots = [];\n      this.dataSheets['reviews'].expandSlotTemplateString(this.serviceOptions_reviews.query, {}, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n      }\n    }\n    \n    {\n      let usedSlots = [];\n      let servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.serviceOptions_reviews.servicePath = servicePath;\n        this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n      }\n    }\n    this.setState({});\n    }\n    dataSheetDidUpdate = (dataSheet) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.setState({});\n    }\n    updateLocalizationFromDataSheet = (dataSheet) => {\n    const stringsObj = dataSheet.getStringsByLanguage();\n    if (stringsObj && Object.keys(stringsObj).length > 0) {\n      this.locStrings = new LocalizedStrings(stringsObj);\n    } else {\n      this.locStrings = new LocalizedStrings({en: {}});\n    }\n    this.locStrings.setLanguage(this.dataSlots['ds_activeLang']);\n    }\n    loadData_firebaserestaurantguide = (dataSheet, options, firstLoad) => {\n    // This method was written by data plugin 'Firebase (Cloud Firestore)'.\n    this.setState({loading: true});\n    \n    // clear any placeholder data before load\n    if (firstLoad) {\n      dataSheet.items = [];\n    }\n    \n    const fetchComplete = (err) => {\n      if (err) {\n        // This error handling comes from React Studio\n        // and currently doesn't do anything useful.\n        console.error('** Web service load failed: ', err);\n      } else {\n      }\n      this.setState({loading: false});\n    }\n    \n    const db = firebase.firestore();\n    const collection = db.collection(options.servicePath);\n    const query = dataSheet.expandSlotTemplateString(options.query, this.dataSlots);\n    let queryObj;\n    \n    if (query.length < 1) {\n      queryObj = collection;\n    } else {\n      console.log(\"loading firebase data for '%s' with query: %s\", options.servicePath, query);\n      try {\n        queryObj = eval(`(function(c){ return c.${query}; })(collection)`);\n      } catch (e) {\n        console.log(\"** error creating firebase query object from '%s': \", query, e)\n        return;\n      }\n    }\n    \n    queryObj.onSnapshot(\n      (querySnapshot) => {\n        let jsonArr = [];\n        \n        if (querySnapshot.docs) {\n          querySnapshot.forEach((doc) => {\n            const data = { ...doc.data(), document_key: doc.id };\n            jsonArr.push(data);\n          });\n        } else if (querySnapshot.data) {\n          const doc = querySnapshot;\n          const data = { ...doc.data(), document_key: doc.id };\n          jsonArr.push(data);\n        }    \n            \n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);  \n      },\n      (err) => {\n        fetchComplete(err, options);\n      });  \n    \n    \n     /*\n    dbLoadingPromise.get().then((querySnapshot) => {\n        let jsonArr = [];\n    \n        querySnapshot.forEach((doc) => {\n          const data = { ...doc.data(), key: doc.id };\n          jsonArr.push(data);\n        });\n            \n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);\n      },\n      (err) => {\n        fetchComplete(err, options);\n      });  \n      */\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var makeElementForScreen = function makeElementForScreen(screenId, baseProps, atTop, forward) {\n        var screenProps = _objectSpread({}, baseProps, {\n          atTopOfScreenStack: atTop,\n          transitionForward: forward,\n          appActions: _this2,\n          dataSheets: _this2.dataSheets,\n          locStrings: _this2.locStrings,\n          deviceInfo: {\n            screenFormatId: _this2.state.screenFormatId\n          },\n          'ds_activeLang': _this2.dataSlots['ds_activeLang'],\n          'ds_selectedRestaurantId': _this2.dataSlots['ds_selectedRestaurantId'],\n          'ds_numberOfRestaurants': _this2.dataSlots['ds_numberOfRestaurants'],\n          'ds_SlotUserID': _this2.dataSlots['ds_SlotUserID'],\n          'ds_SlotUserName': _this2.dataSlots['ds_SlotUserName'],\n          'ds_SlotUserEmail': _this2.dataSlots['ds_SlotUserEmail'],\n          'ds_SlotUserPhoto': _this2.dataSlots['ds_SlotUserPhoto'],\n          'ds_SlotReviewRating': _this2.dataSlots['ds_SlotReviewRating'],\n          'ds_selectedRestaurantName': _this2.dataSlots['ds_selectedRestaurantName']\n        });\n\n        switch (screenId) {\n          default:\n            return null;\n\n          case 'addauser':\n            return React.createElement(AddAUserScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 358\n              },\n              __self: this\n            }));\n\n          case 'sendtext':\n            return React.createElement(SendTextScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 360\n              },\n              __self: this\n            }));\n\n          case 'user':\n            return React.createElement(UserScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 362\n              },\n              __self: this\n            }));\n\n          case 'loginmain':\n            return React.createElement(LoginMainScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 364\n              },\n              __self: this\n            }));\n\n          case 'finalproject':\n            return React.createElement(FinalProjectScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 366\n              },\n              __self: this\n            }));\n        }\n      };\n\n      var screenEl = makeElementForScreen(this.state.currentScreen, this.state.currentScreenProps, true, this.state.screenTransitionForward);\n      var prevScreenEl = null;\n\n      if (this.screenHistory.length >= 2) {\n        // For transitions, we want to show the previous screen below\n        var prevScreenState = this.screenHistory[this.screenHistory.length - 2];\n        prevScreenEl = makeElementForScreen(prevScreenState.currentScreen, prevScreenState.currentScreenProps, false, this.state.screenTransitionForward);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, prevScreenEl, screenEl);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/tamarauber/Desktop/FinalProjAuber/src/App.js"],"names":["React","Component","LocalizedStrings","AddAUserScreen","SendTextScreen","UserScreen","LoginMainScreen","FinalProjectScreen","DataSheet_restaurants","DataSheet_reviews","DataSheet_localizationSheet","DataSheet_pickerNumberOfRows","firebase","firestore","App","props","dataSheets","dataSheetDidUpdate","dataSlots","updateLocalizationFromDataSheet","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","settings","makeElementForScreen","screenId","baseProps","atTop","forward","screenProps","atTopOfScreenStack","transitionForward","appActions","locStrings","deviceInfo","screenFormatId","state","screenEl","currentScreen","currentScreenProps","screenTransitionForward","prevScreenEl","screenHistory","length","prevScreenState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport './App.css';\nimport AddAUserScreen from './AddAUserScreen.js';\nimport SendTextScreen from './SendTextScreen.js';\nimport UserScreen from './UserScreen.js';\nimport LoginMainScreen from './LoginMainScreen.js';\nimport FinalProjectScreen from './FinalProjectScreen.js';\nimport DataSheet_restaurants from './DataSheet_restaurants.js';\nimport DataSheet_reviews from './DataSheet_reviews.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\nimport DataSheet_pickerNumberOfRows from './DataSheet_pickerNumberOfRows.js';\nimport firebase from 'firebase';\nimport firestore from 'firebase/firestore';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataSheets = {};\n    this.dataSheets['restaurants'] = new DataSheet_restaurants('restaurants', this.dataSheetDidUpdate);\n    this.dataSheets['reviews'] = new DataSheet_reviews('reviews', this.dataSheetDidUpdate);\n    this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', this.dataSheetDidUpdate);\n    this.dataSheets['pickerNumberOfRows'] = new DataSheet_pickerNumberOfRows('pickerNumberOfRows', this.dataSheetDidUpdate);\n\n    this.dataSlots = {};\n    this.dataSlots['ds_activeLang'] = \"en\";\n    this.dataSlots['ds_selectedRestaurantId'] = \"4r2BhNHW8guC9SaDbzoG\";\n    this.dataSlots['ds_numberOfRestaurants'] = \"10\";\n    this.dataSlots['ds_SlotUserID'] = \"\";\n    this.dataSlots['ds_SlotUserName'] = \"\";\n    this.dataSlots['ds_SlotUserEmail'] = \"\";\n    this.dataSlots['ds_SlotReviewRating'] = \"0\";\n    this.dataSlots['ds_selectedRestaurantName'] = \"\";\n\n    this.updateLocalizationFromDataSheet(this.dataSheets['localizationSheet']);\n\n\n    // Initialize web service plugin 'firebase-restaurantguide'\n    firebase.initializeApp({\n    \n        apiKey: \"AIzaSyAmVUE1fo5u7SxonFIdBu_wfeP4OPVJZA8\",\n        authDomain: \"restaurantdemo-8131e.firebaseapp.com\",\n        databaseURL: \"https://restaurantdemo-8131e.firebaseio.com\",\n        projectId: \"restaurantdemo-8131e\",\n        storageBucket: \"\",\n        messagingSenderId: \"1076186344909\",\n        appId: \"1:1076186344909:web:2df01f55f460a19d\"\n      \n    });\n    firebase.firestore().settings({});\n    \n    // Initialize web service plugin 'firebase 1'\n    /*firebase.initializeApp({\n        apiKey: \"AIzaSyD98BZnif_88GJQuy_cF67rBJHn_xianFs\",\n        authDomain: \"texterimages.firebaseapp.com\",\n        databaseURL: \"https://texterimages.firebaseio.com\",\n        projectId: \"texterimages\",\n        storageBucket: \"texterimages.appspot.com\",\n        messagingSenderId: \"592534977480\",\n        appId: \"1:592534977480:web:ee43d9435e5a242d\"\n      });\n    firebase.firestore().settings({});\n    \n    this.serviceOptions_restaurants = {\n      dataSlots: this.dataSlots,\n      servicePath: \"restaurants\",\n      query: \"\",\n    };\n    this.dataSheets['restaurants'].firebase = firebase;\n    \n    this.serviceOptions_reviews = {\n      dataSlots: this.dataSlots,\n      servicePath: \"reviews\",\n      query: \"where(\\\"restaurantID\\\", \\\"==\\\", \\\"$slot('ds_selectedRestaurantId')\\\").orderBy(\\\"reviewDate\\\",\\\"desc\\\")\",\n    };\n    this.dataSheets['reviews'].firebase = firebase;\n    \n\n    this.state = {\n      currentScreen: 'loginmain',\n      currentScreenProps: {},\n      screenTransitionForward: true,\n    }\n    this.screenHistory = [ {...this.state} ];\n\n  }\n\n  windowDidResize = () => {\n    let w = window.innerWidth;\n    let formatId;\n    if (w < 576) formatId = 'narrow-phone';\n    else if (w < 768) formatId = 'wide-phone';\n    else if (w < 1024) formatId = 'narrow-tablet';\n    else formatId = 'wide-tablet';\n    if (formatId !== this.state.screenFormatId) {\n      this.setState({screenFormatId: formatId});\n    }\n  }\n\n  componentDidMount() {\n    this.windowDidResize();\n    window.addEventListener('resize', this.windowDidResize);\n\n    this.serviceOptions_restaurants.servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots);\n    this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n    \n    this.serviceOptions_reviews.servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots);\n    this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n    \n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.windowDidResize);\n  }\n\n  isLoading() {\n    return this.state.loading;\n  }\n\n  goToScreen = (screenId, props) => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n\n    let screenIdx = -1;  // Check if the screen is already in the history stack, and pop back if so\n    for (let i = 0; i < this.screenHistory.length; i++) {\n      if (this.screenHistory[i].currentScreen === screenId) {\n        screenIdx = i;\n        break;\n      }\n    }\n    if (screenIdx > -1) {\n      this.screenHistory.splice(screenIdx + 1, this.screenHistory.length - screenIdx - 1);\n      let prevScreenState = this.screenHistory[screenIdx];\n      this.setState({...prevScreenState, screenTransitionForward: false});\n    }\n    else {\n      props = props || {};\n      let screenState = {currentScreen: screenId, currentScreenProps: props};\n      this.screenHistory.push(screenState);\n      this.setState({...screenState, screenTransitionForward: true});\n    }\n    window.scrollTo(0, 0);\n  }\n\n  goBack = () => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n    if (this.screenHistory.length < 2)\n      return;\n\n    this.screenHistory.splice(this.screenHistory.length - 1, 1);\n    let prevScreenState = this.screenHistory[this.screenHistory.length - 1];\n    this.setState({...prevScreenState, screenTransitionForward: false});\n    window.scrollTo(0, 0);\n  }\n\n  getDataSheet = (sheetId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    return this.dataSheets[sheetId];\n  }\n\n  addToDataSheet = (sheetId, newRow, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && newRow) {\n      sheet.addItem(newRow, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateInDataSheet = (sheetId, row, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.replaceItemByKey(row.key, row, this['serviceOptions_'+sheetId] || {});\n\n      if (this.state.currentScreenProps.dataSheetRow) {\n        let screenProps = {...this.state.currentScreenProps};\n        screenProps.dataSheetRow = row;\n\n        // Also update any props that were carried into a detail view\n        for (let prop in screenProps) {\n          if (row[prop] !== undefined) {\n            screenProps[prop] = row[prop];\n          }\n        }\n        this.setState({currentScreenProps: screenProps});\n      } else {\n        this.setState({});\n      }\n    }\n  }\n\n  removeFromDataSheet = (sheetId, row) => {\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.removeItem(row, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateDataSlot = (slotId, value, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.dataSlots[slotId] = value;\n    if (slotId === 'ds_activeLang') {\n      this.locStrings.setLanguage(value);\n    }\n\n    {\n      let usedSlots = [];\n      let servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.serviceOptions_restaurants.servicePath = servicePath;\n        this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n      }\n    }\n    if (this.serviceOptions_reviews.query.length > 0) {\n      let usedSlots = [];\n      this.dataSheets['reviews'].expandSlotTemplateString(this.serviceOptions_reviews.query, {}, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n      }\n    }\n    \n    {\n      let usedSlots = [];\n      let servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.serviceOptions_reviews.servicePath = servicePath;\n        this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n      }\n    }\n    this.setState({});\n  }\n\n  dataSheetDidUpdate = (dataSheet) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.setState({});\n  }\n\n  updateLocalizationFromDataSheet = (dataSheet) => {\n    const stringsObj = dataSheet.getStringsByLanguage();\n    if (stringsObj && Object.keys(stringsObj).length > 0) {\n      this.locStrings = new LocalizedStrings(stringsObj);\n    } else {\n      this.locStrings = new LocalizedStrings({en: {}});\n    }\n    this.locStrings.setLanguage(this.dataSlots['ds_activeLang']);\n  }\n\n  loadData_firebaserestaurantguide = (dataSheet, options, firstLoad) => {\n    // This method was written by data plugin 'Firebase (Cloud Firestore)'.\n   this.setState({loading: true});\n    \n    // clear any placeholder data before load\n    if (firstLoad) {\n      dataSheet.items = [];\n    }\n    \n    const fetchComplete = (err) => {\n      if (err) {\n        // This error handling comes from React Studio\n        // and currently doesn't do anything useful.\n        console.error('** Web service load failed: ', err);\n      } else {\n      }\n      this.setState({loading: false});\n    }\n    \n    const db = firebase.firestore();\n    const collection = db.collection(options.servicePath);\n    const query = dataSheet.expandSlotTemplateString(options.query, this.dataSlots);\n    let queryObj;\n    \n    if (query.length < 1) {\n      queryObj = collection;\n    } else {\n      console.log(\"loading firebase data for '%s' with query: %s\", options.servicePath, query);\n      try {\n        queryObj = eval(`(function(c){ return c.${query}; })(collection)`);\n      } catch (e) {\n        console.log(\"** error creating firebase query object from '%s': \", query, e)\n        return;\n      }\n    }\n    \n    queryObj.onSnapshot(\n      (querySnapshot) => {\n        let jsonArr = [];\n        \n        if (querySnapshot.docs) {\n          querySnapshot.forEach((doc) => {\n            const data = { ...doc.data(), document_key: doc.id };\n            jsonArr.push(data);\n          });\n        } else if (querySnapshot.data) {\n          const doc = querySnapshot;\n          const data = { ...doc.data(), document_key: doc.id };\n          jsonArr.push(data);\n        }    \n            \n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);  \n      },\n      (err) => {\n        fetchComplete(err, options);\n      });  \n    \n    \n     /*\n    dbLoadingPromise.get().then((querySnapshot) => {\n        let jsonArr = [];\n    \n        querySnapshot.forEach((doc) => {\n          const data = { ...doc.data(), key: doc.id };\n          jsonArr.push(data);\n        });\n            \n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);\n      },\n      (err) => {\n        fetchComplete(err, options);\n      });  \n      */\n    \n  }\n\n  render() {\n    let makeElementForScreen = (screenId, baseProps, atTop, forward) => {\n      let screenProps = {\n        ...baseProps,\n        atTopOfScreenStack: atTop,\n        transitionForward: forward,\n        appActions: this,\n        dataSheets: this.dataSheets,\n        locStrings: this.locStrings,\n        deviceInfo: {\n          screenFormatId: this.state.screenFormatId\n        },\n        'ds_activeLang': this.dataSlots['ds_activeLang'],\n        'ds_selectedRestaurantId': this.dataSlots['ds_selectedRestaurantId'],\n        'ds_numberOfRestaurants': this.dataSlots['ds_numberOfRestaurants'],\n        'ds_SlotUserID': this.dataSlots['ds_SlotUserID'],\n        'ds_SlotUserName': this.dataSlots['ds_SlotUserName'],\n        'ds_SlotUserEmail': this.dataSlots['ds_SlotUserEmail'],\n        'ds_SlotUserPhoto': this.dataSlots['ds_SlotUserPhoto'],\n        'ds_SlotReviewRating': this.dataSlots['ds_SlotReviewRating'],\n        'ds_selectedRestaurantName': this.dataSlots['ds_selectedRestaurantName'],\n      };\n      switch (screenId) {\n        default:\n          return null;\n        case 'addauser':\n          return (<AddAUserScreen {...screenProps} />)\n        case 'sendtext':\n          return (<SendTextScreen {...screenProps} />)\n        case 'user':\n          return (<UserScreen {...screenProps} />)\n        case 'loginmain':\n          return (<LoginMainScreen {...screenProps} />)\n        case 'finalproject':\n          return (<FinalProjectScreen {...screenProps} />)\n      }\n    }\n\n    let screenEl = makeElementForScreen(this.state.currentScreen, this.state.currentScreenProps, true, this.state.screenTransitionForward);\n    let prevScreenEl = null;\n    if (this.screenHistory.length >= 2) {  // For transitions, we want to show the previous screen below\n      let prevScreenState = this.screenHistory[this.screenHistory.length - 2];\n      prevScreenEl = makeElementForScreen(prevScreenState.currentScreen, prevScreenState.currentScreenProps, false, this.state.screenTransitionForward);\n    }\n\n    return (\n      <div className=\"App\">\n        {prevScreenEl}\n        {screenEl}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}