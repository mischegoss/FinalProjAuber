{"ast":null,"code":"var babelHelpers = require('./babel-helpers.js');\n/**\n * MUI React select module\n * @module react/select\n */\n\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = babelHelpers.interopRequireDefault(_react);\n\nvar _forms = require('../js/lib/forms');\n\nvar formlib = babelHelpers.interopRequireWildcard(_forms);\n\nvar _jqLite = require('../js/lib/jqLite');\n\nvar jqLite = babelHelpers.interopRequireWildcard(_jqLite);\n\nvar _util = require('../js/lib/util');\n\nvar util = babelHelpers.interopRequireWildcard(_util);\n\nvar _helpers = require('./_helpers');\n/**\n * Select constructor\n * @class\n */\n\n\nvar Select = function (_React$Component) {\n  babelHelpers.inherits(Select, _React$Component);\n\n  function Select(props) {\n    babelHelpers.classCallCheck(this, Select); // warn if value defined but onChange is not\n\n    var _this = babelHelpers.possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n    _this.state = {\n      showMenu: false\n    };\n\n    if (props.readOnly === false && props.value !== undefined && props.onChange === null) {\n      util.raiseError(_helpers.controlledMessage, true);\n    }\n\n    _this.state.value = props.value; // bind callback function\n\n    var cb = util.callback;\n    _this.onInnerChangeCB = cb(_this, 'onInnerChange');\n    _this.onInnerMouseDownCB = cb(_this, 'onInnerMouseDown');\n    _this.onOuterClickCB = cb(_this, 'onOuterClick');\n    _this.onOuterKeyDownCB = cb(_this, 'onOuterKeyDown');\n    _this.hideMenuCB = cb(_this, 'hideMenu');\n    _this.onMenuChangeCB = cb(_this, 'onMenuChange');\n    return _this;\n  }\n\n  babelHelpers.createClass(Select, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // disable MUI CSS/JS\n      this.controlEl._muiSelect = true;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        value: nextProps.value\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // ensure that doc event listners have been removed\n      jqLite.off(window, 'resize', this.hideMenuCB);\n      jqLite.off(document, 'click', this.hideMenuCB);\n    }\n  }, {\n    key: 'onInnerChange',\n    value: function onInnerChange(ev) {\n      // update state\n      this.setState({\n        value: ev.target.value\n      });\n    }\n  }, {\n    key: 'onInnerMouseDown',\n    value: function onInnerMouseDown(ev) {\n      // only left clicks & check flag\n      if (ev.button !== 0 || this.props.useDefault) return; // prevent built-in menu from opening\n\n      ev.preventDefault();\n    }\n  }, {\n    key: 'onOuterClick',\n    value: function onOuterClick(ev) {\n      // only left clicks, return if <select> is disabled\n      if (ev.button !== 0 || this.controlEl.disabled) return; // execute callback\n\n      var fn = this.props.onClick;\n      fn && fn(ev); // exit if preventDefault() was called\n\n      if (ev.defaultPrevented || this.props.useDefault) return; // focus wrapper\n\n      this.wrapperElRef.focus(); // open custom menu\n\n      this.showMenu();\n    }\n  }, {\n    key: 'onOuterKeyDown',\n    value: function onOuterKeyDown(ev) {\n      // execute callback\n      var fn = this.props.onKeyDown;\n      fn && fn(ev); // exit if preventDevault() was called or useDefault is true\n\n      if (ev.defaultPrevented || this.props.useDefault) return;\n\n      if (this.state.showMenu === false) {\n        var keyCode = ev.keyCode; // spacebar, down, up\n\n        if (keyCode === 32 || keyCode === 38 || keyCode === 40) {\n          // prevent default browser action\n          ev.preventDefault(); // open custom menu\n\n          this.showMenu();\n        }\n      }\n    }\n  }, {\n    key: 'showMenu',\n    value: function showMenu() {\n      // check useDefault flag\n      if (this.props.useDefault) return; // add event listeners\n\n      jqLite.on(window, 'resize', this.hideMenuCB);\n      jqLite.on(document, 'click', this.hideMenuCB); // re-draw\n\n      this.setState({\n        showMenu: true\n      });\n    }\n  }, {\n    key: 'hideMenu',\n    value: function hideMenu(ev) {\n      // check default prevented\n      if (ev && ev.defaultPrevented) return; // remove event listeners\n\n      jqLite.off(window, 'resize', this.hideMenuCB);\n      jqLite.off(document, 'click', this.hideMenuCB); // re-draw\n\n      this.setState({\n        showMenu: false\n      }); // refocus\n\n      this.wrapperElRef.focus();\n    }\n  }, {\n    key: 'onMenuChange',\n    value: function onMenuChange(index) {\n      if (this.props.readOnly) return; // update inner <select> and dispatch 'change' event\n\n      this.controlEl.selectedIndex = index;\n      util.dispatchEvent(this.controlEl, 'change');\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var value = this.state.value,\n          valueArgs = {},\n          menuElem = void 0,\n          placeholderElem = void 0,\n          selectCls = void 0;\n\n      if (this.state.showMenu) {\n        menuElem = _react2.default.createElement(Menu, {\n          optionEls: this.controlEl.children,\n          wrapperEl: this.wrapperElRef,\n          onChange: this.onMenuChangeCB,\n          onClose: this.hideMenuCB\n        });\n      } // set tab index so user can focus wrapper element\n\n\n      var tabIndexWrapper = '-1',\n          tabIndexInner = '0';\n\n      if (this.props.useDefault === false) {\n        tabIndexWrapper = '0';\n        tabIndexInner = '-1';\n      }\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          style = _props.style,\n          label = _props.label,\n          defaultValue = _props.defaultValue,\n          readOnly = _props.readOnly,\n          disabled = _props.disabled,\n          useDefault = _props.useDefault,\n          name = _props.name,\n          placeholder = _props.placeholder,\n          reactProps = babelHelpers.objectWithoutProperties(_props, ['children', 'className', 'style', 'label', 'defaultValue', 'readOnly', 'disabled', 'useDefault', 'name', 'placeholder']); // build value arguments\n\n      if (this.props.value !== undefined) valueArgs.value = value; // controlled\n\n      if (defaultValue !== undefined) valueArgs.defaultValue = defaultValue; // handle placeholder\n\n      if (placeholder) {\n        placeholderElem = _react2.default.createElement('option', {\n          className: 'mui--text-placeholder',\n          value: ''\n        }, placeholder); // apply class if value is empty\n\n        if (value === '' || value === undefined && !defaultValue) {\n          selectCls = 'mui--text-placeholder';\n        }\n      }\n\n      return _react2.default.createElement('div', babelHelpers.extends({}, reactProps, {\n        ref: function ref(el) {\n          _this2.wrapperElRef = el;\n        },\n        tabIndex: tabIndexWrapper,\n        style: style,\n        className: 'mui-select ' + className,\n        onClick: this.onOuterClickCB,\n        onKeyDown: this.onOuterKeyDownCB\n      }), _react2.default.createElement('select', babelHelpers.extends({}, valueArgs, {\n        ref: function ref(el) {\n          _this2.controlEl = el;\n        },\n        className: selectCls,\n        name: name,\n        disabled: disabled,\n        tabIndex: tabIndexInner,\n        readOnly: readOnly,\n        onChange: this.onInnerChangeCB,\n        onMouseDown: this.onInnerMouseDownCB,\n        required: this.props.required\n      }), placeholderElem, children), _react2.default.createElement('label', {\n        tabIndex: '-1'\n      }, label), menuElem);\n    }\n  }]);\n  return Select;\n}(_react2.default.Component);\n/**\n * Menu constructor\n * @class\n */\n\n\nSelect.defaultProps = {\n  className: '',\n  name: '',\n  placeholder: null,\n  readOnly: false,\n  useDefault: typeof document !== 'undefined' && 'ontouchstart' in document.documentElement ? true : false,\n  onChange: null,\n  onClick: null,\n  onKeyDown: null\n};\n\nvar Menu = function (_React$Component2) {\n  babelHelpers.inherits(Menu, _React$Component2);\n\n  function Menu(props) {\n    babelHelpers.classCallCheck(this, Menu);\n\n    var _this3 = babelHelpers.possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));\n\n    _this3.state = {\n      origIndex: null,\n      currentIndex: 0\n    };\n    _this3.onKeyDownCB = util.callback(_this3, 'onKeyDown');\n    _this3.onKeyPressCB = util.callback(_this3, 'onKeyPress');\n    _this3.q = '';\n    _this3.qTimeout = null;\n    _this3.availOptionEls = []; // extract selectable options\n\n    var optionEls = props.optionEls,\n        el = void 0,\n        i = void 0;\n\n    for (i = 0; i < optionEls.length; i++) {\n      el = optionEls[i];\n      if (!el.disabled && !el.hidden) _this3.availOptionEls.push(el);\n    }\n\n    return _this3;\n  }\n\n  babelHelpers.createClass(Menu, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var optionEls = this.availOptionEls,\n          m = optionEls.length,\n          selectedPos = null,\n          i = void 0; // get current selected position\n\n      for (i = m - 1; i > -1; i--) {\n        if (optionEls[i].selected) selectedPos = i;\n      }\n\n      if (selectedPos !== null) {\n        this.setState({\n          origIndex: selectedPos,\n          currentIndex: selectedPos\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // prevent scrolling\n      util.enableScrollLock();\n      var menuEl = this.wrapperElRef; // set position\n\n      var props = formlib.getMenuPositionalCSS(this.props.wrapperEl, menuEl, this.state.currentIndex);\n      jqLite.css(menuEl, props);\n      jqLite.scrollTop(menuEl, props.scrollTop); // attach keydown handler\n\n      jqLite.on(document, 'keydown', this.onKeyDownCB);\n      jqLite.on(document, 'keypress', this.onKeyPressCB);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // remove scroll lock\n      util.disableScrollLock(true); // remove keydown handler\n\n      jqLite.off(document, 'keydown', this.onKeyDownCB);\n      jqLite.off(document, 'keypress', this.onKeyPressCB);\n    }\n  }, {\n    key: 'onClick',\n    value: function onClick(pos, ev) {\n      // don't allow events to bubble\n      //ev.stopPropagation();\n      ev.preventDefault();\n      if (pos !== null) this.selectAndDestroy(pos);\n    }\n  }, {\n    key: 'onKeyDown',\n    value: function onKeyDown(ev) {\n      var keyCode = ev.keyCode; // tab\n\n      if (keyCode === 9) return this.destroy(); // escape | up | down | enter\n\n      if (keyCode === 27 || keyCode === 40 || keyCode === 38 || keyCode === 13) {\n        ev.preventDefault();\n      }\n\n      if (keyCode === 27) this.destroy();else if (keyCode === 40) this.increment();else if (keyCode === 38) this.decrement();else if (keyCode === 13) this.selectAndDestroy();\n    }\n  }, {\n    key: 'onKeyPress',\n    value: function onKeyPress(ev) {\n      // handle query timer\n      var self = this;\n      clearTimeout(this.qTimeout);\n      this.q += ev.key;\n      this.qTimeout = setTimeout(function () {\n        self.q = '';\n      }, 300); // select first match alphabetically\n\n      var prefixRegex = new RegExp('^' + this.q, 'i'),\n          optionEls = this.availOptionEls,\n          m = optionEls.length,\n          i = void 0;\n\n      for (i = 0; i < m; i++) {\n        // select item if code matches\n        if (prefixRegex.test(optionEls[i].innerText)) {\n          this.setState({\n            currentIndex: i\n          });\n          break;\n        }\n      }\n    }\n  }, {\n    key: 'increment',\n    value: function increment() {\n      if (this.state.currentIndex === this.availOptionEls.length - 1) return;\n      this.setState({\n        currentIndex: this.state.currentIndex + 1\n      });\n    }\n  }, {\n    key: 'decrement',\n    value: function decrement() {\n      if (this.state.currentIndex === 0) return;\n      this.setState({\n        currentIndex: this.state.currentIndex - 1\n      });\n    }\n  }, {\n    key: 'selectAndDestroy',\n    value: function selectAndDestroy(pos) {\n      pos = pos === undefined ? this.state.currentIndex : pos; // handle onChange\n\n      if (pos !== this.state.origIndex) {\n        this.props.onChange(this.availOptionEls[pos].index);\n      } // close menu\n\n\n      this.destroy();\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.props.onClose();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      // scroll menu (if necessary)\n      if (this.state.currentIndex != prevState.currentIndex) {\n        var menuEl = this.wrapperElRef,\n            itemEl = menuEl.children[this.state.currentIndex],\n            itemRect = itemEl.getBoundingClientRect();\n\n        if (itemRect.top < 0) {\n          // menu item is hidden above visible window\n          menuEl.scrollTop = menuEl.scrollTop + itemRect.top - 5;\n        } else if (itemRect.top > window.innerHeight) {\n          // menu item is hidden below visible window\n          menuEl.scrollTop = menuEl.scrollTop + (itemRect.top + itemRect.height - window.innerHeight) + 5;\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var menuItems = [],\n          optionEls = this.props.optionEls,\n          m = optionEls.length,\n          pos = 0,\n          optionEl = void 0,\n          cls = void 0,\n          val = void 0,\n          i = void 0; // define menu items\n\n      for (i = 0; i < m; i++) {\n        optionEl = optionEls[i]; // handle hidden\n\n        if (optionEl.hidden) continue; // handle disabled\n\n        if (optionEl.disabled) {\n          cls = 'mui--is-disabled ';\n          val = null;\n        } else {\n          cls = pos === this.state.currentIndex ? 'mui--is-selected ' : '';\n          val = pos;\n          pos += 1;\n        } // add custom css class from <Option> component\n\n\n        cls += optionEl.className;\n        menuItems.push(_react2.default.createElement('div', {\n          key: i,\n          className: cls,\n          onClick: this.onClick.bind(this, val)\n        }, optionEl.textContent));\n      }\n\n      return _react2.default.createElement('div', {\n        ref: function ref(el) {\n          _this4.wrapperElRef = el;\n        },\n        className: 'mui-select__menu'\n      }, menuItems);\n    }\n  }]);\n  return Menu;\n}(_react2.default.Component);\n/** Define module API */\n\n\nMenu.defaultProps = {\n  optionEls: [],\n  wrapperEl: null,\n  onChange: null,\n  onClose: null\n};\nexports.default = Select;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}