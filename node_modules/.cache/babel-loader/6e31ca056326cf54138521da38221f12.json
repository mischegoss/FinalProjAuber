{"ast":null,"code":"import _objectSpread from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tamarauber/Desktop/FinalProjAuber/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tamarauber/Desktop/FinalProjAuber/src/App.js\";\nimport React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport './App.css';\nimport AddAUserScreen from './AddAUserScreen.js';\nimport SendTextScreen from './SendTextScreen.js';\nimport UserScreen from './UserScreen.js';\nimport LoginMainScreen from './LoginMainScreen.js';\nimport FinalProjectScreen from './FinalProjectScreen.js';\nimport DataSheet_restaurants from './DataSheet_restaurants.js';\nimport DataSheet_reviews from './DataSheet_reviews.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\nimport DataSheet_pickerNumberOfRows from './DataSheet_pickerNumberOfRows.js';\nimport firebase from 'firebase';\nimport firestore from 'firebase/firestore';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(_props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, _props));\n\n    _this.windowDidResize = function () {\n      var w = window.innerWidth;\n      var formatId;\n      if (w < 576) formatId = 'narrow-phone';else if (w < 768) formatId = 'wide-phone';else if (w < 1024) formatId = 'narrow-tablet';else formatId = 'wide-tablet';\n\n      if (formatId !== _this.state.screenFormatId) {\n        _this.setState({\n          screenFormatId: formatId\n        });\n      }\n    };\n\n    _this.goToScreen = function (screenId, props) {\n      // This method is the default implementation and could be customized by a navigation plugin.\n      var screenIdx = -1; // Check if the screen is already in the history stack, and pop back if so\n\n      for (var i = 0; i < _this.screenHistory.length; i++) {\n        if (_this.screenHistory[i].currentScreen === screenId) {\n          screenIdx = i;\n          break;\n        }\n      }\n\n      if (screenIdx > -1) {\n        _this.screenHistory.splice(screenIdx + 1, _this.screenHistory.length - screenIdx - 1);\n\n        var prevScreenState = _this.screenHistory[screenIdx];\n\n        _this.setState(_objectSpread({}, prevScreenState, {\n          screenTransitionForward: false\n        }));\n      } else {\n        props = props || {};\n        var screenState = {\n          currentScreen: screenId,\n          currentScreenProps: props\n        };\n\n        _this.screenHistory.push(screenState);\n\n        _this.setState(_objectSpread({}, screenState, {\n          screenTransitionForward: true\n        }));\n      }\n\n      window.scrollTo(0, 0);\n    };\n\n    _this.goBack = function () {\n      // This method is the default implementation and could be customized by a navigation plugin.\n      if (_this.screenHistory.length < 2) return;\n\n      _this.screenHistory.splice(_this.screenHistory.length - 1, 1);\n\n      var prevScreenState = _this.screenHistory[_this.screenHistory.length - 1];\n\n      _this.setState(_objectSpread({}, prevScreenState, {\n        screenTransitionForward: false\n      }));\n\n      window.scrollTo(0, 0);\n    };\n\n    _this.getDataSheet = function (sheetId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      return _this.dataSheets[sheetId];\n    };\n\n    _this.addToDataSheet = function (sheetId, newRow, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && newRow) {\n        sheet.addItem(newRow, _this['serviceOptions_' + sheetId] || {});\n      }\n\n      _this.setState({});\n    };\n\n    _this.updateInDataSheet = function (sheetId, row, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && row) {\n        sheet.replaceItemByKey(row.key, row, _this['serviceOptions_' + sheetId] || {});\n\n        if (_this.state.currentScreenProps.dataSheetRow) {\n          var screenProps = _objectSpread({}, _this.state.currentScreenProps);\n\n          screenProps.dataSheetRow = row; // Also update any props that were carried into a detail view\n\n          for (var prop in screenProps) {\n            if (row[prop] !== undefined) {\n              screenProps[prop] = row[prop];\n            }\n          }\n\n          _this.setState({\n            currentScreenProps: screenProps\n          });\n        } else {\n          _this.setState({});\n        }\n      }\n    };\n\n    _this.removeFromDataSheet = function (sheetId, row) {\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && row) {\n        sheet.removeItem(row, _this['serviceOptions_' + sheetId] || {});\n      }\n\n      _this.setState({});\n    };\n\n    _this.updateDataSlot = function (slotId, value, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      _this.dataSlots[slotId] = value;\n\n      if (slotId === 'ds_activeLang') {\n        _this.locStrings.setLanguage(value);\n      }\n\n      {\n        var usedSlots = [];\n\n        var servicePath = _this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", _this.dataSlots, usedSlots);\n\n        if (usedSlots.includes(slotId)) {\n          // if data sheet's content depends on this slot, reload it now\n          _this.serviceOptions_restaurants.servicePath = servicePath;\n\n          _this.loadData_firebaserestaurantguide(_this.dataSheets['restaurants'], _this.serviceOptions_restaurants, true);\n        }\n      }\n\n      if (_this.serviceOptions_reviews.query.length > 0) {\n        var _usedSlots = [];\n\n        _this.dataSheets['reviews'].expandSlotTemplateString(_this.serviceOptions_reviews.query, {}, _usedSlots);\n\n        if (_usedSlots.includes(slotId)) {\n          // if data sheet's content depends on this slot, reload it now\n          _this.loadData_firebaserestaurantguide(_this.dataSheets['reviews'], _this.serviceOptions_reviews, true);\n        }\n      }\n\n      {\n        var _usedSlots2 = [];\n\n        var _servicePath = _this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", _this.dataSlots, _usedSlots2);\n\n        if (_usedSlots2.includes(slotId)) {\n          // if data sheet's content depends on this slot, reload it now\n          _this.serviceOptions_reviews.servicePath = _servicePath;\n\n          _this.loadData_firebaserestaurantguide(_this.dataSheets['reviews'], _this.serviceOptions_reviews, true);\n        }\n      }\n\n      _this.setState({});\n    };\n\n    _this.dataSheetDidUpdate = function (dataSheet) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      _this.setState({});\n    };\n\n    _this.updateLocalizationFromDataSheet = function (dataSheet) {\n      var stringsObj = dataSheet.getStringsByLanguage();\n\n      if (stringsObj && Object.keys(stringsObj).length > 0) {\n        _this.locStrings = new LocalizedStrings(stringsObj);\n      } else {\n        _this.locStrings = new LocalizedStrings({\n          en: {}\n        });\n      }\n\n      _this.locStrings.setLanguage(_this.dataSlots['ds_activeLang']);\n    };\n\n    _this.loadData_firebaserestaurantguide = function (dataSheet, options, firstLoad) {\n      // This method was written by data plugin 'Firebase (Cloud Firestore)'.\n      _this.setState({\n        loading: true\n      }); // clear any placeholder data before load\n\n\n      if (firstLoad) {\n        dataSheet.items = [];\n      }\n\n      var fetchComplete = function fetchComplete(err) {\n        if (err) {\n          // This error handling comes from React Studio\n          // and currently doesn't do anything useful.\n          console.error('** Web service load failed: ', err);\n        } else {}\n\n        _this.setState({\n          loading: false\n        });\n      };\n\n      var db = firebase.firestore();\n      var collection = db.collection(options.servicePath);\n      var query = dataSheet.expandSlotTemplateString(options.query, _this.dataSlots);\n      var queryObj;\n\n      if (query.length < 1) {\n        queryObj = collection;\n      } else {\n        console.log(\"loading firebase data for '%s' with query: %s\", options.servicePath, query);\n\n        try {\n          queryObj = eval(\"(function(c){ return c.\".concat(query, \"; })(collection)\"));\n        } catch (e) {\n          console.log(\"** error creating firebase query object from '%s': \", query, e);\n          return;\n        }\n      }\n\n      queryObj.onSnapshot(function (querySnapshot) {\n        var jsonArr = [];\n\n        if (querySnapshot.docs) {\n          querySnapshot.forEach(function (doc) {\n            var data = _objectSpread({}, doc.data(), {\n              document_key: doc.id\n            });\n\n            jsonArr.push(data);\n          });\n        } else if (querySnapshot.data) {\n          var doc = querySnapshot;\n\n          var data = _objectSpread({}, doc.data(), {\n            document_key: doc.id\n          });\n\n          jsonArr.push(data);\n        }\n\n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);\n      }, function (err) {\n        fetchComplete(err, options);\n      });\n      /*\n      dbLoadingPromise.get().then((querySnapshot) => {\n         let jsonArr = [];\n              querySnapshot.forEach((doc) => {\n           const data = { ...doc.data(), key: doc.id };\n           jsonArr.push(data);\n         });\n             \n         dataSheet.loadFromJson(jsonArr);\n         fetchComplete(null, options);\n       },\n       (err) => {\n         fetchComplete(err, options);\n       });  \n       */\n    };\n\n    _this.dataSheets = {};\n    _this.dataSheets['restaurants'] = new DataSheet_restaurants('restaurants', _this.dataSheetDidUpdate);\n    _this.dataSheets['reviews'] = new DataSheet_reviews('reviews', _this.dataSheetDidUpdate);\n    _this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', _this.dataSheetDidUpdate);\n    _this.dataSheets['pickerNumberOfRows'] = new DataSheet_pickerNumberOfRows('pickerNumberOfRows', _this.dataSheetDidUpdate);\n    _this.dataSlots = {};\n    _this.dataSlots['ds_activeLang'] = \"en\";\n    _this.dataSlots['ds_selectedRestaurantId'] = \"4r2BhNHW8guC9SaDbzoG\";\n    _this.dataSlots['ds_numberOfRestaurants'] = \"10\";\n    _this.dataSlots['ds_SlotUserID'] = \"\";\n    _this.dataSlots['ds_SlotUserName'] = \"\";\n    _this.dataSlots['ds_SlotUserEmail'] = \"\";\n    _this.dataSlots['ds_SlotReviewRating'] = \"0\";\n    _this.dataSlots['ds_selectedRestaurantName'] = \"\";\n\n    _this.updateLocalizationFromDataSheet(_this.dataSheets['localizationSheet']); // Initialize web service plugin 'firebase-restaurantguide'\n\n\n    firebase.initializeApp({\n      apiKey: \"AIzaSyAmVUE1fo5u7SxonFIdBu_wfeP4OPVJZA8\",\n      authDomain: \"restaurantdemo-8131e.firebaseapp.com\",\n      databaseURL: \"https://restaurantdemo-8131e.firebaseio.com\",\n      projectId: \"restaurantdemo-8131e\",\n      storageBucket: \"\",\n      messagingSenderId: \"1076186344909\",\n      appId: \"1:1076186344909:web:2df01f55f460a19d\"\n    });\n    firebase.firestore().settings({}); // Initialize web service plugin 'firebase 1'\n\n    /*firebase.initializeApp({\n        apiKey: \"AIzaSyD98BZnif_88GJQuy_cF67rBJHn_xianFs\",\n        authDomain: \"texterimages.firebaseapp.com\",\n        databaseURL: \"https://texterimages.firebaseio.com\",\n        projectId: \"texterimages\",\n        storageBucket: \"texterimages.appspot.com\",\n        messagingSenderId: \"592534977480\",\n        appId: \"1:592534977480:web:ee43d9435e5a242d\"\n      }); */\n\n    firebase.firestore().settings({});\n    _this.serviceOptions_restaurants = {\n      dataSlots: _this.dataSlots,\n      servicePath: \"restaurants\",\n      query: \"\"\n    };\n    _this.dataSheets['restaurants'].firebase = firebase;\n    _this.serviceOptions_reviews = {\n      dataSlots: _this.dataSlots,\n      servicePath: \"reviews\",\n      query: \"where(\\\"restaurantID\\\", \\\"==\\\", \\\"$slot('ds_selectedRestaurantId')\\\").orderBy(\\\"reviewDate\\\",\\\"desc\\\")\"\n    };\n    _this.dataSheets['reviews'].firebase = firebase;\n    _this.state = {\n      currentScreen: 'loginmain',\n      currentScreenProps: {},\n      screenTransitionForward: true\n    };\n    _this.screenHistory = [_objectSpread({}, _this.state)];\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.windowDidResize();\n      window.addEventListener('resize', this.windowDidResize);\n      this.serviceOptions_restaurants.servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots);\n      this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n      this.serviceOptions_reviews.servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots);\n      this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.windowDidResize);\n    }\n  }, {\n    key: \"isLoading\",\n    value: function isLoading() {\n      return this.state.loading;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var makeElementForScreen = function makeElementForScreen(screenId, baseProps, atTop, forward) {\n        var screenProps = _objectSpread({}, baseProps, {\n          atTopOfScreenStack: atTop,\n          transitionForward: forward,\n          appActions: _this2,\n          dataSheets: _this2.dataSheets,\n          locStrings: _this2.locStrings,\n          deviceInfo: {\n            screenFormatId: _this2.state.screenFormatId\n          },\n          'ds_activeLang': _this2.dataSlots['ds_activeLang'],\n          'ds_selectedRestaurantId': _this2.dataSlots['ds_selectedRestaurantId'],\n          'ds_numberOfRestaurants': _this2.dataSlots['ds_numberOfRestaurants'],\n          'ds_SlotUserID': _this2.dataSlots['ds_SlotUserID'],\n          'ds_SlotUserName': _this2.dataSlots['ds_SlotUserName'],\n          'ds_SlotUserEmail': _this2.dataSlots['ds_SlotUserEmail'],\n          'ds_SlotUserPhoto': _this2.dataSlots['ds_SlotUserPhoto'],\n          'ds_SlotReviewRating': _this2.dataSlots['ds_SlotReviewRating'],\n          'ds_selectedRestaurantName': _this2.dataSlots['ds_selectedRestaurantName']\n        });\n\n        switch (screenId) {\n          default:\n            return null;\n\n          case 'addauser':\n            return React.createElement(AddAUserScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 358\n              },\n              __self: this\n            }));\n\n          case 'sendtext':\n            return React.createElement(SendTextScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 360\n              },\n              __self: this\n            }));\n\n          case 'user':\n            return React.createElement(UserScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 362\n              },\n              __self: this\n            }));\n\n          case 'loginmain':\n            return React.createElement(LoginMainScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 364\n              },\n              __self: this\n            }));\n\n          case 'finalproject':\n            return React.createElement(FinalProjectScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 366\n              },\n              __self: this\n            }));\n        }\n      };\n\n      var screenEl = makeElementForScreen(this.state.currentScreen, this.state.currentScreenProps, true, this.state.screenTransitionForward);\n      var prevScreenEl = null;\n\n      if (this.screenHistory.length >= 2) {\n        // For transitions, we want to show the previous screen below\n        var prevScreenState = this.screenHistory[this.screenHistory.length - 2];\n        prevScreenEl = makeElementForScreen(prevScreenState.currentScreen, prevScreenState.currentScreenProps, false, this.state.screenTransitionForward);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, prevScreenEl, screenEl);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/tamarauber/Desktop/FinalProjAuber/src/App.js"],"names":["React","Component","LocalizedStrings","AddAUserScreen","SendTextScreen","UserScreen","LoginMainScreen","FinalProjectScreen","DataSheet_restaurants","DataSheet_reviews","DataSheet_localizationSheet","DataSheet_pickerNumberOfRows","firebase","firestore","App","props","windowDidResize","w","window","innerWidth","formatId","state","screenFormatId","setState","goToScreen","screenId","screenIdx","i","screenHistory","length","currentScreen","splice","prevScreenState","screenTransitionForward","screenState","currentScreenProps","push","scrollTo","goBack","getDataSheet","sheetId","dataSheets","addToDataSheet","newRow","actionId","sheet","addItem","updateInDataSheet","row","replaceItemByKey","key","dataSheetRow","screenProps","prop","undefined","removeFromDataSheet","removeItem","updateDataSlot","slotId","value","dataSlots","locStrings","setLanguage","usedSlots","servicePath","expandSlotTemplateString","includes","serviceOptions_restaurants","loadData_firebaserestaurantguide","serviceOptions_reviews","query","dataSheetDidUpdate","dataSheet","updateLocalizationFromDataSheet","stringsObj","getStringsByLanguage","Object","keys","en","options","firstLoad","loading","items","fetchComplete","err","console","error","db","collection","queryObj","log","eval","e","onSnapshot","querySnapshot","jsonArr","docs","forEach","doc","data","document_key","id","loadFromJson","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","settings","addEventListener","removeEventListener","makeElementForScreen","baseProps","atTop","forward","atTopOfScreenStack","transitionForward","appActions","deviceInfo","screenEl","prevScreenEl"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport './App.css';\nimport AddAUserScreen from './AddAUserScreen.js';\nimport SendTextScreen from './SendTextScreen.js';\nimport UserScreen from './UserScreen.js';\nimport LoginMainScreen from './LoginMainScreen.js';\nimport FinalProjectScreen from './FinalProjectScreen.js';\nimport DataSheet_restaurants from './DataSheet_restaurants.js';\nimport DataSheet_reviews from './DataSheet_reviews.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\nimport DataSheet_pickerNumberOfRows from './DataSheet_pickerNumberOfRows.js';\nimport firebase from 'firebase';\nimport firestore from 'firebase/firestore';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataSheets = {};\n    this.dataSheets['restaurants'] = new DataSheet_restaurants('restaurants', this.dataSheetDidUpdate);\n    this.dataSheets['reviews'] = new DataSheet_reviews('reviews', this.dataSheetDidUpdate);\n    this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', this.dataSheetDidUpdate);\n    this.dataSheets['pickerNumberOfRows'] = new DataSheet_pickerNumberOfRows('pickerNumberOfRows', this.dataSheetDidUpdate);\n\n    this.dataSlots = {};\n    this.dataSlots['ds_activeLang'] = \"en\";\n    this.dataSlots['ds_selectedRestaurantId'] = \"4r2BhNHW8guC9SaDbzoG\";\n    this.dataSlots['ds_numberOfRestaurants'] = \"10\";\n    this.dataSlots['ds_SlotUserID'] = \"\";\n    this.dataSlots['ds_SlotUserName'] = \"\";\n    this.dataSlots['ds_SlotUserEmail'] = \"\";\n    this.dataSlots['ds_SlotReviewRating'] = \"0\";\n    this.dataSlots['ds_selectedRestaurantName'] = \"\";\n\n    this.updateLocalizationFromDataSheet(this.dataSheets['localizationSheet']);\n\n\n    // Initialize web service plugin 'firebase-restaurantguide'\n    firebase.initializeApp({\n    \n        apiKey: \"AIzaSyAmVUE1fo5u7SxonFIdBu_wfeP4OPVJZA8\",\n        authDomain: \"restaurantdemo-8131e.firebaseapp.com\",\n        databaseURL: \"https://restaurantdemo-8131e.firebaseio.com\",\n        projectId: \"restaurantdemo-8131e\",\n        storageBucket: \"\",\n        messagingSenderId: \"1076186344909\",\n        appId: \"1:1076186344909:web:2df01f55f460a19d\"\n      \n    });\n    firebase.firestore().settings({});\n    \n    // Initialize web service plugin 'firebase 1'\n    /*firebase.initializeApp({\n        apiKey: \"AIzaSyD98BZnif_88GJQuy_cF67rBJHn_xianFs\",\n        authDomain: \"texterimages.firebaseapp.com\",\n        databaseURL: \"https://texterimages.firebaseio.com\",\n        projectId: \"texterimages\",\n        storageBucket: \"texterimages.appspot.com\",\n        messagingSenderId: \"592534977480\",\n        appId: \"1:592534977480:web:ee43d9435e5a242d\"\n      }); */\n    firebase.firestore().settings({});\n    \n    this.serviceOptions_restaurants = {\n      dataSlots: this.dataSlots,\n      servicePath: \"restaurants\",\n      query: \"\",\n    };\n    this.dataSheets['restaurants'].firebase = firebase;\n    \n    this.serviceOptions_reviews = {\n      dataSlots: this.dataSlots,\n      servicePath: \"reviews\",\n      query: \"where(\\\"restaurantID\\\", \\\"==\\\", \\\"$slot('ds_selectedRestaurantId')\\\").orderBy(\\\"reviewDate\\\",\\\"desc\\\")\",\n    };\n    this.dataSheets['reviews'].firebase = firebase;\n    \n\n    this.state = {\n      currentScreen: 'loginmain',\n      currentScreenProps: {},\n      screenTransitionForward: true,\n    }\n    this.screenHistory = [ {...this.state} ];\n\n  }\n\n  windowDidResize = () => {\n    let w = window.innerWidth;\n    let formatId;\n    if (w < 576) formatId = 'narrow-phone';\n    else if (w < 768) formatId = 'wide-phone';\n    else if (w < 1024) formatId = 'narrow-tablet';\n    else formatId = 'wide-tablet';\n    if (formatId !== this.state.screenFormatId) {\n      this.setState({screenFormatId: formatId});\n    }\n  }\n\n  componentDidMount() {\n    this.windowDidResize();\n    window.addEventListener('resize', this.windowDidResize);\n\n    this.serviceOptions_restaurants.servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots);\n    this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n    \n    this.serviceOptions_reviews.servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots);\n    this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n    \n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.windowDidResize);\n  }\n\n  isLoading() {\n    return this.state.loading;\n  }\n\n  goToScreen = (screenId, props) => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n\n    let screenIdx = -1;  // Check if the screen is already in the history stack, and pop back if so\n    for (let i = 0; i < this.screenHistory.length; i++) {\n      if (this.screenHistory[i].currentScreen === screenId) {\n        screenIdx = i;\n        break;\n      }\n    }\n    if (screenIdx > -1) {\n      this.screenHistory.splice(screenIdx + 1, this.screenHistory.length - screenIdx - 1);\n      let prevScreenState = this.screenHistory[screenIdx];\n      this.setState({...prevScreenState, screenTransitionForward: false});\n    }\n    else {\n      props = props || {};\n      let screenState = {currentScreen: screenId, currentScreenProps: props};\n      this.screenHistory.push(screenState);\n      this.setState({...screenState, screenTransitionForward: true});\n    }\n    window.scrollTo(0, 0);\n  }\n\n  goBack = () => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n    if (this.screenHistory.length < 2)\n      return;\n\n    this.screenHistory.splice(this.screenHistory.length - 1, 1);\n    let prevScreenState = this.screenHistory[this.screenHistory.length - 1];\n    this.setState({...prevScreenState, screenTransitionForward: false});\n    window.scrollTo(0, 0);\n  }\n\n  getDataSheet = (sheetId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    return this.dataSheets[sheetId];\n  }\n\n  addToDataSheet = (sheetId, newRow, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && newRow) {\n      sheet.addItem(newRow, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateInDataSheet = (sheetId, row, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.replaceItemByKey(row.key, row, this['serviceOptions_'+sheetId] || {});\n\n      if (this.state.currentScreenProps.dataSheetRow) {\n        let screenProps = {...this.state.currentScreenProps};\n        screenProps.dataSheetRow = row;\n\n        // Also update any props that were carried into a detail view\n        for (let prop in screenProps) {\n          if (row[prop] !== undefined) {\n            screenProps[prop] = row[prop];\n          }\n        }\n        this.setState({currentScreenProps: screenProps});\n      } else {\n        this.setState({});\n      }\n    }\n  }\n\n  removeFromDataSheet = (sheetId, row) => {\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.removeItem(row, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateDataSlot = (slotId, value, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.dataSlots[slotId] = value;\n    if (slotId === 'ds_activeLang') {\n      this.locStrings.setLanguage(value);\n    }\n\n    {\n      let usedSlots = [];\n      let servicePath = this.dataSheets['restaurants'].expandSlotTemplateString(\"restaurants\", this.dataSlots, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.serviceOptions_restaurants.servicePath = servicePath;\n        this.loadData_firebaserestaurantguide(this.dataSheets['restaurants'], this.serviceOptions_restaurants, true);\n      }\n    }\n    if (this.serviceOptions_reviews.query.length > 0) {\n      let usedSlots = [];\n      this.dataSheets['reviews'].expandSlotTemplateString(this.serviceOptions_reviews.query, {}, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n      }\n    }\n    \n    {\n      let usedSlots = [];\n      let servicePath = this.dataSheets['reviews'].expandSlotTemplateString(\"reviews\", this.dataSlots, usedSlots);\n      if (usedSlots.includes(slotId)) {\n        // if data sheet's content depends on this slot, reload it now\n        this.serviceOptions_reviews.servicePath = servicePath;\n        this.loadData_firebaserestaurantguide(this.dataSheets['reviews'], this.serviceOptions_reviews, true);\n      }\n    }\n    this.setState({});\n  }\n\n  dataSheetDidUpdate = (dataSheet) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.setState({});\n  }\n\n  updateLocalizationFromDataSheet = (dataSheet) => {\n    const stringsObj = dataSheet.getStringsByLanguage();\n    if (stringsObj && Object.keys(stringsObj).length > 0) {\n      this.locStrings = new LocalizedStrings(stringsObj);\n    } else {\n      this.locStrings = new LocalizedStrings({en: {}});\n    }\n    this.locStrings.setLanguage(this.dataSlots['ds_activeLang']);\n  }\n\n  loadData_firebaserestaurantguide = (dataSheet, options, firstLoad) => {\n    // This method was written by data plugin 'Firebase (Cloud Firestore)'.\n   this.setState({loading: true});\n    \n    // clear any placeholder data before load\n    if (firstLoad) {\n      dataSheet.items = [];\n    }\n    \n    const fetchComplete = (err) => {\n      if (err) {\n        // This error handling comes from React Studio\n        // and currently doesn't do anything useful.\n        console.error('** Web service load failed: ', err);\n      } else {\n      }\n      this.setState({loading: false});\n    }\n    \n    const db = firebase.firestore();\n    const collection = db.collection(options.servicePath);\n    const query = dataSheet.expandSlotTemplateString(options.query, this.dataSlots);\n    let queryObj;\n    \n    if (query.length < 1) {\n      queryObj = collection;\n    } else {\n      console.log(\"loading firebase data for '%s' with query: %s\", options.servicePath, query);\n      try {\n        queryObj = eval(`(function(c){ return c.${query}; })(collection)`);\n      } catch (e) {\n        console.log(\"** error creating firebase query object from '%s': \", query, e)\n        return;\n      }\n    }\n    \n    queryObj.onSnapshot(\n      (querySnapshot) => {\n        let jsonArr = [];\n        \n        if (querySnapshot.docs) {\n          querySnapshot.forEach((doc) => {\n            const data = { ...doc.data(), document_key: doc.id };\n            jsonArr.push(data);\n          });\n        } else if (querySnapshot.data) {\n          const doc = querySnapshot;\n          const data = { ...doc.data(), document_key: doc.id };\n          jsonArr.push(data);\n        }    \n            \n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);  \n      },\n      (err) => {\n        fetchComplete(err, options);\n      });  \n    \n    \n     /*\n    dbLoadingPromise.get().then((querySnapshot) => {\n        let jsonArr = [];\n    \n        querySnapshot.forEach((doc) => {\n          const data = { ...doc.data(), key: doc.id };\n          jsonArr.push(data);\n        });\n            \n        dataSheet.loadFromJson(jsonArr);\n        fetchComplete(null, options);\n      },\n      (err) => {\n        fetchComplete(err, options);\n      });  \n      */\n    \n  }\n\n  render() {\n    let makeElementForScreen = (screenId, baseProps, atTop, forward) => {\n      let screenProps = {\n        ...baseProps,\n        atTopOfScreenStack: atTop,\n        transitionForward: forward,\n        appActions: this,\n        dataSheets: this.dataSheets,\n        locStrings: this.locStrings,\n        deviceInfo: {\n          screenFormatId: this.state.screenFormatId\n        },\n        'ds_activeLang': this.dataSlots['ds_activeLang'],\n        'ds_selectedRestaurantId': this.dataSlots['ds_selectedRestaurantId'],\n        'ds_numberOfRestaurants': this.dataSlots['ds_numberOfRestaurants'],\n        'ds_SlotUserID': this.dataSlots['ds_SlotUserID'],\n        'ds_SlotUserName': this.dataSlots['ds_SlotUserName'],\n        'ds_SlotUserEmail': this.dataSlots['ds_SlotUserEmail'],\n        'ds_SlotUserPhoto': this.dataSlots['ds_SlotUserPhoto'],\n        'ds_SlotReviewRating': this.dataSlots['ds_SlotReviewRating'],\n        'ds_selectedRestaurantName': this.dataSlots['ds_selectedRestaurantName'],\n      };\n      switch (screenId) {\n        default:\n          return null;\n        case 'addauser':\n          return (<AddAUserScreen {...screenProps} />)\n        case 'sendtext':\n          return (<SendTextScreen {...screenProps} />)\n        case 'user':\n          return (<UserScreen {...screenProps} />)\n        case 'loginmain':\n          return (<LoginMainScreen {...screenProps} />)\n        case 'finalproject':\n          return (<FinalProjectScreen {...screenProps} />)\n      }\n    }\n\n    let screenEl = makeElementForScreen(this.state.currentScreen, this.state.currentScreenProps, true, this.state.screenTransitionForward);\n    let prevScreenEl = null;\n    if (this.screenHistory.length >= 2) {  // For transitions, we want to show the previous screen below\n      let prevScreenState = this.screenHistory[this.screenHistory.length - 2];\n      prevScreenEl = makeElementForScreen(prevScreenState.currentScreen, prevScreenState.currentScreenProps, false, this.state.screenTransitionForward);\n    }\n\n    return (\n      <div className=\"App\">\n        {prevScreenEl}\n        {screenEl}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}